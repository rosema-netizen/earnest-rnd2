{"version":3,"sources":["how-we-help.css","../vendors/icons/icons.scss","../vendors/icons/variables/_variables.scss","../../../node_modules/bootstrap/scss/mixins/_breakpoints.scss","how-we-help.scss"],"names":[],"mappings":"AAAA,WCGE,iBAAA,CACA,uJACE,CAGF,eAAA,CACA,iBAAA,CACA,kBAAA,CAGF,iCAEE,2BAAA,CACA,WAAA,CACA,iBAAA,CACA,eAAA,CACA,mBAAA,CACA,mBAAA,CACA,aAAA,CAGA,kCAAA,CACA,iCAAA,CAIA,0BACE,WC1Be,CD8BjB,uBACE,WC9BY,CDkCd,8BACE,WClCmB,CDsCrB,yBACE,WCtCc,CD0ChB,+BACE,WC1CoB,CD8CtB,0BACE,WC9Ce,CDkDjB,wBACE,WClDc,CDsDhB,mBACE,WCtDS,CD0DX,yBACE,WC1De,CD8DjB,0BACE,WC9DgB,CCkDhB,wBCzDI,0BAEQ,YAAA,CACA,mCAAA,CAAA,CAGR,uBACI,yBAAA,CDkDR,wBCnDI,uBAGQ,eAAA,CACA,aAAA,CAAA,CAEJ,mCACI,8BAAA,CAEJ,kCACI,+BAAA,CAMR,uBACI,wBAAA,CACA,gBAAA,CACA,8BACI,6BAAA,CACA,2BAAA,CACA,0BAAA,CAIZ,kBACI,2BAAA,CDwBJ,wBCzBA,kBAGS,wBAAA,CAAA,CAEL,sBACI,gBAAA,CACA,gBAAA,CDkBR,wBCpBI,sBAIQ,gBAAA,CAAA,CDgBZ,wBCbI,0BAEQ,YAAA,CACA,6BAAA,CAAA,CAIZ,oBACI,2BAAA,CDkBJ,2BCnBA,oBAGI,iBAAA,CAAA,CDGJ,wBCNA,oBAMI,2BAAA,CAAA","file":"../how-we-help.min.css","sourcesContent":["@font-face{font-family:Icons;src:url(../fonts/Icons.ttf?qldv0u) format(\"truetype\"),url(../fonts/Icons.woff?qldv0u) format(\"woff\"),url(../fonts/Icons.svg?qldv0u#Icons) format(\"svg\");font-weight:400;font-style:normal;font-display:block}[class*=\" icon-\"],[class^=icon-]{font-family:Icons!important;speak:never;font-style:normal;font-weight:400;font-variant:normal;text-transform:none;line-height:1;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale}.icon-left-circle::before{content:\"\"}.icon-arrow-up::before{content:\"\"}.icon-arrow-left-fill::before{content:\"\"}.icon-arrow-down::before{content:\"\"}.icon-arrow-right-fill::before{content:\"\"}.icon-arrow-right::before{content:\"\"}.icon-arrow-left:before{content:\"\"}.icon-close:before{content:\"\"}.icon-tick-circle:before{content:\"\"}.icon-right-circle:before{content:\"\"}@media(min-width:992px){.how-we-help .tab-content{display:grid;grid-template-columns:repeat(3,1fr)}}.how-we-help .tab-pane{border-radius:0 2rem 2rem}@media(min-width:992px){.how-we-help .tab-pane{border-radius:0;display:block}}.how-we-help .tab-pane:first-child{border-bottom-left-radius:2rem}.how-we-help .tab-pane:last-child{border-bottom-right-radius:2rem}.how-we-help .nav-link{background:rgba(0,0,0,0);font-size:1.2rem}.how-we-help .nav-link.active{background:rgba(0,148,138,.5);border-radius:1rem 1rem 0 0;border:solid .1rem #00948a}.how-we-help__img{border-radius:2rem 2rem 0 0}@media(min-width:992px){.how-we-help__img{border-top-left-radius:0}}.how-we-help__img img{min-height:15rem;max-height:20rem}@media(min-width:992px){.how-we-help__img img{max-height:25rem}}@media(min-width:992px){.how-we-help__img-wrapper{display:grid;grid-template-columns:1fr 2fr}}.how-we-help__title{background:rgba(0,77,71,.5)}@media(max-width:991.98px){.how-we-help__title{position:absolute}}@media(min-width:992px){.how-we-help__title{border-top-left-radius:2rem}}","@import \"variables/variables\";\n\n@font-face {\n  font-family: '#{$icomoon-font-family}';\n  src:\n    url('#{$icomoon-font-path}/#{$icomoon-font-family}.ttf?qldv0u') format('truetype'),\n    url('#{$icomoon-font-path}/#{$icomoon-font-family}.woff?qldv0u') format('woff'),\n    url('#{$icomoon-font-path}/#{$icomoon-font-family}.svg?qldv0u##{$icomoon-font-family}') format('svg');\n  font-weight: normal;\n  font-style: normal;\n  font-display: block;\n}\n\n[class^=\"icon-\"], [class*=\" icon-\"] {\n  /* use !important to prevent issues with browser extensions that change fonts */\n  font-family: '#{$icomoon-font-family}' !important;\n  speak: never;\n  font-style: normal;\n  font-weight: normal;\n  font-variant: normal;\n  text-transform: none;\n  line-height: 1;\n\n  /* Better Font Rendering =========== */\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n\n.icon-left-circle {\n  &::before {\n    content: $icon-left-circle; \n  }\n}\n.icon-arrow-up {\n  &::before {\n    content: $icon-arrow-up; \n  }\n}\n.icon-arrow-left-fill {\n  &::before {\n    content: $icon-arrow-left-fill; \n  }\n}\n.icon-arrow-down {\n  &::before {\n    content: $icon-arrow-down; \n  }\n}\n.icon-arrow-right-fill {\n  &::before {\n    content: $icon-arrow-right-fill; \n  }\n}\n.icon-arrow-right {\n  &::before {\n    content: $icon-arrow-right; \n  }\n}\n.icon-arrow-left {\n  &:before {\n    content: $icon-arrow-left; \n  }\n}\n.icon-close {\n  &:before {\n    content: $icon-close; \n  }\n}\n.icon-tick-circle {\n  &:before {\n    content: $icon-tick-circle; \n  }\n}\n.icon-right-circle {\n  &:before {\n    content: $icon-right-circle; \n  }\n}\n\n","$icomoon-font-family: \"Icons\" !default; // Name should be same as font name [Strict case sensitive]\n$icomoon-font-path: \"./../fonts\" !default;\n\n\n$icon-left-circle: \"\\e909\";\n$icon-arrow-up: \"\\e903\";\n$icon-arrow-left-fill: \"\\e904\";\n$icon-arrow-down: \"\\e905\";\n$icon-arrow-right-fill: \"\\e906\";\n$icon-arrow-right: \"\\e908\";\n$icon-arrow-left: \"\\e907\";\n$icon-close: \"\\e902\";\n$icon-tick-circle: \"\\e900\";\n$icon-right-circle: \"\\e901\";\n","// Breakpoint viewport sizes and media queries.\n//\n// Breakpoints are defined as a map of (name: minimum width), order from small to large:\n//\n//    (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px)\n//\n// The map defined in the `$grid-breakpoints` global variable is used as the `$breakpoints` argument by default.\n\n// Name of the next breakpoint, or null for the last breakpoint.\n//\n//    >> breakpoint-next(sm)\n//    md\n//    >> breakpoint-next(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    md\n//    >> breakpoint-next(sm, $breakpoint-names: (xs sm md lg xl xxl))\n//    md\n@function breakpoint-next($name, $breakpoints: $grid-breakpoints, $breakpoint-names: map-keys($breakpoints)) {\n  $n: index($breakpoint-names, $name);\n  @if not $n {\n    @error \"breakpoint `#{$name}` not found in `#{$breakpoints}`\";\n  }\n  @return if($n < length($breakpoint-names), nth($breakpoint-names, $n + 1), null);\n}\n\n// Minimum breakpoint width. Null for the smallest (first) breakpoint.\n//\n//    >> breakpoint-min(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    576px\n@function breakpoint-min($name, $breakpoints: $grid-breakpoints) {\n  $min: map-get($breakpoints, $name);\n  @return if($min != 0, $min, null);\n}\n\n// Maximum breakpoint width.\n// The maximum value is reduced by 0.02px to work around the limitations of\n// `min-` and `max-` prefixes and viewports with fractional widths.\n// See https://www.w3.org/TR/mediaqueries-4/#mq-min-max\n// Uses 0.02px rather than 0.01px to work around a current rounding bug in Safari.\n// See https://bugs.webkit.org/show_bug.cgi?id=178261\n//\n//    >> breakpoint-max(md, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    767.98px\n@function breakpoint-max($name, $breakpoints: $grid-breakpoints) {\n  $max: map-get($breakpoints, $name);\n  @return if($max and $max > 0, $max - .02, null);\n}\n\n// Returns a blank string if smallest breakpoint, otherwise returns the name with a dash in front.\n// Useful for making responsive utilities.\n//\n//    >> breakpoint-infix(xs, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"\"  (Returns a blank string)\n//    >> breakpoint-infix(sm, (xs: 0, sm: 576px, md: 768px, lg: 992px, xl: 1200px, xxl: 1400px))\n//    \"-sm\"\n@function breakpoint-infix($name, $breakpoints: $grid-breakpoints) {\n  @return if(breakpoint-min($name, $breakpoints) == null, \"\", \"-#{$name}\");\n}\n\n// Media of at least the minimum breakpoint width. No query for the smallest breakpoint.\n// Makes the @content apply to the given breakpoint and wider.\n@mixin media-breakpoint-up($name, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($name, $breakpoints);\n  @if $min {\n    @media (min-width: $min) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media of at most the maximum breakpoint width. No query for the largest breakpoint.\n// Makes the @content apply to the given breakpoint and narrower.\n@mixin media-breakpoint-down($name, $breakpoints: $grid-breakpoints) {\n  $max: breakpoint-max($name, $breakpoints);\n  @if $max {\n    @media (max-width: $max) {\n      @content;\n    }\n  } @else {\n    @content;\n  }\n}\n\n// Media that spans multiple breakpoint widths.\n// Makes the @content apply between the min and max breakpoints\n@mixin media-breakpoint-between($lower, $upper, $breakpoints: $grid-breakpoints) {\n  $min: breakpoint-min($lower, $breakpoints);\n  $max: breakpoint-max($upper, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($lower, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($upper, $breakpoints) {\n      @content;\n    }\n  }\n}\n\n// Media between the breakpoint's minimum and maximum widths.\n// No minimum for the smallest breakpoint, and no maximum for the largest one.\n// Makes the @content apply only to the given breakpoint, not viewports any wider or narrower.\n@mixin media-breakpoint-only($name, $breakpoints: $grid-breakpoints) {\n  $min:  breakpoint-min($name, $breakpoints);\n  $next: breakpoint-next($name, $breakpoints);\n  $max:  breakpoint-max($next, $breakpoints);\n\n  @if $min != null and $max != null {\n    @media (min-width: $min) and (max-width: $max) {\n      @content;\n    }\n  } @else if $max == null {\n    @include media-breakpoint-up($name, $breakpoints) {\n      @content;\n    }\n  } @else if $min == null {\n    @include media-breakpoint-down($next, $breakpoints) {\n      @content;\n    }\n  }\n}\n","@import '../common-imports';\n@import '../vendors/icons/variables/variables';\n@import '../vendors/icons/icons.scss';\n\n.how-we-help{\n    .tab{\n        &-content{\n            @include media-breakpoint-up(lg){\n                display: grid;\n                grid-template-columns: repeat(3,1fr);\n            }\n        }\n        &-pane{\n            border-radius: 0 2rem 2rem;\n            @include media-breakpoint-up(lg){\n                border-radius:0;\n                display: block;\n            }\n            &:first-child{\n                border-bottom-left-radius: 2rem;\n            }\n            &:last-child{\n                border-bottom-right-radius: 2rem;\n            }\n\n        }\n    }\n    .nav{\n        &-link{\n            background: transparent;\n            font-size: 1.2rem;\n            &.active{\n                background: rgba($teal, 0.5);\n                border-radius: 1rem 1rem 0 0;\n                border: solid 0.1rem $teal;\n            }\n        }\n    }\n    &__img{\n        border-radius: 2rem 2rem 0 0;\n        @include media-breakpoint-up(lg){\n             border-top-left-radius: 0;\n        }\n        img{\n            min-height: 15rem;\n            max-height: 20rem;\n            @include media-breakpoint-up(lg){\n                max-height: 25rem;\n            }\n        }\n        &-wrapper{\n            @include media-breakpoint-up(lg){\n                display: grid;\n                grid-template-columns: 1fr 2fr;\n            }\n        }\n    }\n    &__title{\n        background:rgba($primary, 0.5);\n        @include media-breakpoint-down(lg){\n        position: absolute;\n    }\n    @include media-breakpoint-up(lg){\n        border-top-left-radius: 2rem;\n    }\n    }\n}\n\n"]}